#!/bin/bash
  
##############################################################################
# run-httpd, by Steven Saus 20 Sep 2022
#
# For setting up and running the Apache webserver inside a Docker container.
#
# steven@faithcollapsing.com
# Licensed under the Apache License
##############################################################################  

set -e

export XDG_CONFIG_HOME=/usr/local/share
export XDG_STATE_HOME=/usr/local/state

##############################################################################
#
# Copy user configs into appropriate places in Docker container at spinup.
# mpd.conf
# minidlna
# snapcast
#
##############################################################################
if [ -f /media/config/mpd.conf ];then 
    cp -f /media/config/mpd.conf /etc
fi
if [ -f /media/config/minidlna.conf ];then 
    cp -f /media/config/minidlna.conf /etc
fi
if [ -f /media/config/snapserver.conf ];then 
    cp -f /media/config/snapserver.conf /etc
fi
if [ -f /media/config/snapserver ];then 
    cp -f /media/config/snapserver /etc/default
fi

export MPD_HOST=mycomplicatedpassword@localhost


# TODO
# look in systemd files to see how they start them

# Start avahi
echo "avahi"
# /usr/sbin/avahi-daemon -s
#ExecReload=/usr/sbin/avahi-daemon -r

# Start MPD
#EnvironmentFile=/etc/default/mpd
echo "mpd"
/usr/bin/mpd 

# Start mpdscribble
echo "mpdscribble"
#/usr/bin/mpdscribble &

# Start snapserver
echo "snapserver"
#source /etc/default/snapserver
mkdir -p ${XDG_STATE_HOME}/snapserver
#/usr/bin/snapserver --logging.sink=system --server.datadir="${XDG_STATE_HOME}/snapserver" $SNAPSERVER_OPTS &
# start minidlna
#/bin/mkdir -p /var/run/minidlna
#/bin/chown $USER /var/run/minidlna
#/usr/sbin/minidlnad -S &

##############################################################################
# For MPDQ setup
##############################################################################
# 
# download & install mpdq (if needed) using local archive first.
# Yes, upgrading requires a rebuild.
# 
if [ ! -d /mpdq-master ];then
    if [ -f /media/config/mpdq-master.zip ];then
        unzip /media/config/mpdq-master.zip
    else
        wget https://github.com/uriel1998/mpdq/archive/refs/heads/master.zip
        unzip ./master.zip
        rm ./master.zip
    fi
fi
    
# Define the two directories that MPDQ needs.
export ConfigDir=${XDG_CONFIG_HOME}/mpdq
if [ ! -d ${ConfigDir} ]; then
    mkdir -p ${ConfigDir}
fi
ConfigFile=$ConfigDir/mpdq.ini

export StateDir=${XDG_STATE_HOME}/mpdq
if [ ! -d ${StateDir} ]; then
    mkdir -p ${StateDir}
fi

# Copy in configurations.
if [ -f /media/config/mpdq.ini ];then 
    cp -f /media/config/mpdq.ini ${ConfigDir}
fi
# The provided stub is an EXCLUSION type
if [ -f /media/config/default.cfg ];then 
    cp -f /media/config/default.cfg ${ConfigDir}
fi

# Copy OUT default example with updated genre list at spinup.
if [ ! -f ${StateDir}/example_instruction_file ];then
    echo "Exporting example instruction file with list of genres."
    #/mpdq-master/mpdq -e 
    #cp -f ${StateDir}/example_instruction /media/config
fi

if [ -f ${ConfigDir}/default.cfg ];then 
    echo "starting mpdq"
    #/mpdq-master/mpdq 
fi

##############################################################################
#
# If Rompr is not installed, do so now.
#
# Also uses local archive first. I do not believe rompr needs any configs from
# outside the container, either.
#
###############################################################################
if [ ! -d /var/www/rompr ];then
    mkdir -p /var/www/rompr
    cd /var/www
    if [ -f /media/config/rompr-1.61.zip ];then
        unzip /media/config/rompr-1.61.zip
    else
        wget https://github.com/uriel1998/mpdq/archive/refs/heads/master.zip
        unzip ./master.zip
        rm ./master.zip
    fi
fi

##############################################################################
#
# Checking/fixing rompr permissions at spin up
#
##############################################################################
if [ ! -d /var/www/rompr/albumart ];then
    mkdir -p /var/www/rompr/{albumart,prefs}
fi

chown -R www-data:www-data /var/www/rompr/{albumart,prefs}

# I mean, really, tho.

chown -R www-data:www-data /var/www

##############################################################################
#
# Apache site setup
#
##############################################################################

# remove all sites enabled
rm -rf /etc/apache2/sites-enabled/*
# symlink everything in sites available (which is bound to outside the container)
sites=$(ls -A "/etc/apache2/sites-available")

for site in $sites;do
    a2ensite ${site%.*}
done

if [ ! -f /etc/php/7.4/myinit ];then 
    ###############################################################################
    # Environment variables to configure php
    # Adjust as needed, then rebuild the container (docker-compose up --build)
    ###############################################################################
    sed -ri -e  's/^allow_url_fopen =.*/allow_url_fopen = On/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^memory_limit =.*/memory_limit = 512M/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^max_execution_time =.*/max_execution_time = 1800/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^post_max_size =.*/post_max_size = 256M/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^upload_max_filesize =.*/upload_max_filesize = 8M/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^max_file_uploads =.*/max_file_uploads = 50/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^display_errors =.*/display_errors = On/g' /etc/php/7.4/fpm/php.ini
    sed -ri -e  's/^display_startup_errors =.*/display_startup_errors = On/g' /etc/php/7.4/fpm/php.ini

    ###############################################################################
    # Load apache mods and configurations. 
    # Adjust as needed, then rebuild the container (docker-compose up --build)
    ###############################################################################
    update-rc.d php7.4-fpm defaults
    a2enmod proxy_fcgi && \
    a2enmod setenvif && \
    a2enmod alias && \
    a2enmod autoindex && \
    a2enmod deflate && \
    a2enmod dir && \
    a2enmod mime && \
    a2enmod mime_magic && \
    a2enmod rewrite && \
    a2enmod xml2enc && \
    a2enmod actions && \
    a2enmod auth_basic && \
    a2enmod cgi && \
    a2enmod expires && \
    a2enmod headers && \
    a2enmod proxy && \
    a2enmod proxy_html && \
    a2enmod proxy_http && \
    a2enmod proxy_scgi && \
    a2enmod proxy_wstunnel 

    a2enconf php7.4-fpm && \
    a2enconf charset && \
    a2enconf javascript-common && \
    a2enconf security && \
    a2enconf serve-cgi-bin 

    touch /etc/php/7.4/myinit
fi

###############################################################################
# Restart php-fpm and apache. Apache needs to be started this way so that  
# it stays in the foreground, otherwise Docker closes it down.
###############################################################################

/etc/init.d/php7.4-fpm restart

apachectl -D FOREGROUND
